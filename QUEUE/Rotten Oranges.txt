Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the minimum time required to rot all oranges. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
 

Example 1:

Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
Output: 1
Explanation: The grid is-
0 1 2
0 1 2
2 1 1
Oranges at positions (0,2), (1,2), (2,0)
will rot oranges at (0,1), (1,1), (2,2) and 
(2,1) in unit time.

class pair{
    int first;
    int second;
    pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        // Code here
        Queue<pair> q=new LinkedList<>();
        int r = grid.length;
        int c = grid[0].length;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==2){
                    q.add(new pair(i,j));
                }
            }
        }
        int count=0;
        q.add(new pair(-1,-1));
        while(!q.isEmpty()){
            int i=q.peek().first;
            int j=q.peek().second;
            if(i==-1 && j==-1 && q.size()==1){
                q.remove();
                break;
            }
            else if(i==-1 && j==-1 && q.size()>1){
                count++;
                q.remove();
                q.add(new pair(-1,-1));
            }
            else{
                if((i-1)>=0 && grid[i-1][j]==1){
                    grid[i-1][j]=2;
                    q.add(new pair(i-1,j));
                }
                if((j-1)>=0 && grid[i][j-1]==1){
                    grid[i][j-1]=2;
                    q.add(new pair(i,j-1));
                }
                if((i+1)<r && grid[i+1][j]==1){
                    grid[i+1][j]=2;
                    q.add(new pair(i+1,j));
                }
                if((j+1)<c && grid[i][j+1]==1){
                    grid[i][j+1]=2;
                    q.add(new pair(i,j+1));
                }
                q.remove();
            }
        }
        
         for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
             
         }
         return count;
    }
}