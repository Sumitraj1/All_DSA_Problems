Given two sorted arrays array1 and array2 of size m and n respectively. Find the median of the two sorted arrays.

Example 1:

Input:
m = 3, n = 4
array1[] = {1,5,9}
array2[] = {2,3,6,7}
Output: 5
Explanation: The middle element for
{1,2,3,5,6,7,9} is 5




class GFG 
{ 
    static double medianOfArrays(int n, int m, int a[], int b[]) 
    {
        // Your Code Here
        //  int merged[] = new int[n+m];
        
        // System.arraycopy(a ,0 ,merged ,0 , n);
        // System.arraycopy(b, 0 , merged ,n, m);
        // Arrays.sort(merged);
        
        //  int mid = (n+m)/2;
        //  return (n+m)%2 == 0 ? (merged[mid -1] + merged[mid])/2.0 : merged[mid];
        
        
        
        
        
        
        
//   ArrayList<Integer> arr = new ArrayList<Integer>();
        
//         int o = n+m;
//         double res;
//         int[] c = new int[o];
        
//          for(int i=0;i<n;i++){
//             arr.add(a[i]);
//         }
//         for(int j=0;j<m;j++){
//             arr.add(b[j]);
//         }
//         for(int i=0; i<arr.size(); i++){
//             c[i]=arr.get(i);
//         }
//         Arrays.sort(c);
//         int k = c.length;
        
//         if(k % 2==0){
//              res = (double)((c[k/2]+c[(k/2)-1])/2.0); 
//             //System.out.println(ans);
//             return res;
//         }
//         else {
//             res = c[k/2]; 
//           //System.out.println(ans);
//           return res;
//         }



   
        if(n<=m)
         return medianAns(a, b,n,m);
        else  
         return medianAns(b, a,m,n);
    }
    static double medianAns(int[] array1, int[] array2,int n,int m){
        
        int begin1=0, end1=n;
        
        while(begin1<=end1){
            int i1 = (begin1 + end1)/2;
            int i2 = (n+m+1)/2 - i1;
            
            int max1 = (i1==0) ? Integer.MIN_VALUE: array1[i1-1];
            int min1 = (i1==n) ? Integer.MAX_VALUE : array1[i1];
            
            int max2 = (i2==0) ? Integer.MIN_VALUE : array2[i2-1];
            int min2 = (i2==m) ? Integer.MAX_VALUE: array2[i2];
            
            if(max1<=min2 && max2<=min1){
                if((n+m)%2==0)
                  return (double)(Math.max(max1,max2)+Math.min(min1,min2))/2;
                else
                  return (double)Math.max(max1,max2);
            }
            else if (max1>min2)
                 end1= i1-1;
            else
                 begin1 = i1+1;
        }
        return 0;
    }
    
    }

