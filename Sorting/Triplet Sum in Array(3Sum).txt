Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.


Example 1:

Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.



class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int A[], int n, int X) { 
    
       // Your code Here
    //   Arrays.sort(A);
    //   int sum=0;
    //   for(int i=0;i<n-2;i++)
    //   {
    //       int left=i+1,right=n-1;
    //       while(left<right)
    //       {
    //             sum=A[i]+A[left]+A[right];
    //           if(sum==X)
    //           {
    //               return true;
    //           }
    //           else if(sum>X)
    //           {
    //               right--;
    //           }
    //           else
    //           {
    //               left++;
    //           }
    //       }
    //   }
    //   return false;
    
     for (int i = 0; i < n - 2; i++) {
  
            // Find pair in subarray A[i+1..n-1]
            // with sum equal to sum - A[i]
            HashSet<Integer> s = new HashSet<Integer>();
            int curr_sum = X - A[i];
            for (int j = i + 1; j < n; j++)
            {
                if (s.contains(curr_sum - A[j]))
                {
                    //System.out.print("Triplet is " + A[i] + ", " + A[j] + ", " + (curr_sum - A[j]));
                    return true;
                }
                s.add(A[j]);
            }
        }
  
        // If we reach here, then no triplet was found
        return false;
    
    }
}
