Given an array arr[] of n integers. Check whether it contains a triplet that sums up to zero. 

Note: Return 1, if there is at least one triplet following the condition else return 0.

Example 1:

Input: n = 5, arr[] = {0, -1, 2, -3, 1}
Output: 1
Explanation: 0, -1 and 1 forms a triplet
with sum equal to 0.



class Solution
{
    // arr[]: input array
    // n: size of the array
    //Function to find triplets with zero sum.
	public boolean findTriplets(int arr[] , int n)
    {
        //add code here.
        //O(n^2) Solution
        //  for(int i=1;i<n-1;i++)
        // {
        //     HashSet<Integer> s=new HashSet<>();
        //     for(int j=0;j<i;j++)
        //     {
        //         s.add(arr[j]);
        //     }
        //     for(int j=i+1;j<n;j++)
        //     {
        //         if(s.contains(0-(arr[i]+arr[j])))
        //         return true;
        //     }
        // }
        // return false;
        
        //O(logn) Solution
        Arrays.sort(arr);
        for(int i=0; i<n-2; i++) {
            int start = i+1;
            int end = n-1;
            
            while(start<end) {
                int sum = arr[i] + arr[start] + arr[end];
                
                if(sum==0) {
                    return true;
                } 
                else if(sum<0) {
                    start++;
                }else{
                    end--;
                }
            }
        }
        return false;
        
      //O(n^2) Solution  
//   boolean found = false;
//   Arrays.sort(arr);
//   for (int i = 0; i < n - 1; i++) {
//     int l = i + 1;
//     int r = n - 1;
//     int x = arr[i];
//     while (l < r) {
//       if (x + arr[l] + arr[r] == 0) {
//         l++;
//         r--;
//         found = true;
//         break;
//       } else if (x + arr[l] + arr[r] < 0)
//         l++;
//       else
//         r--;
//     }
//     if (found)
//       break;
//   }
//   return found;
    }
}