You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls.

Example 1:

Input:
n=5 
k=3
stalls = [1 2 4 8 9]
Output:
3
Explanation:
The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, 
which also is the largest among all possible ways.


class Solution {
    static boolean ispossible(int stalls[],int k,int mid,int n){
        int cowCount=1;
        int lastpos=stalls[0];
        
        for(int i=1;i<n;i++){
            if(stalls[i]-lastpos >=mid){
                cowCount++;
                if(cowCount==k){
                    return true;
                }
                lastpos=stalls[i];
            }
        }
        return false;
    }
    public static int solve(int n, int k, int[] stalls) {
        Arrays.sort(stalls);
        
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
             min=Math.min(min,stalls[i]);
             max=Math.max(max,stalls[i]);
        }
        int start=0;
        int end=max-min;
        
        int ans=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(ispossible(stalls,k,mid,n)){
                ans=mid;
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return ans;
    }
}