
Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]



BY USING MIN-HEAP:-
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        class Pair{
            int key;
            int value;
    
            Pair(int key, int value){
                this.key = key;
                this.value = value;
            }
        }

        List<Integer> ll = new ArrayList<>();
        
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>(10, new Comparator<Pair>(){
            // @Override
            public int compare(Pair f, Pair s){
                if(s.value - f.value == 0){
                    return s.key - f.key;
                }else{
                    return s.value - f.value;    
                }
                
            }
        });
        
        for(int i:arr){ 
            
                maxHeap.add(new Pair(i, Math.abs(i - x)));
            
            if(maxHeap.size()>k){
                maxHeap.poll();
            }
        }
        
        while(maxHeap.size() != 0){
            ll.add(maxHeap.peek().key);
            maxHeap.poll();
        }
        
        Collections.sort(ll);
        return ll;
        
    }
}

BY USING MIN-HEAP:-
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        class Pair{
            int key;
            int value;
    
            Pair(int key, int value){
                this.key = key;
                this.value = value;
            }
        }

        List<Integer> ll = new ArrayList<>();
        
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>(10, new Comparator<Pair>(){
            // @Override
            public int compare(Pair f, Pair s){
                if(s.value - f.value == 0){
                    return s.key - f.key;
                }else{
                    return s.value - f.value;    
                }
                
            }
        });
        
        for(int i:arr){ 
            
                maxHeap.add(new Pair(i, Math.abs(i - x)));
            
            if(maxHeap.size()>k){
                maxHeap.poll();
            }
        }
        
        while(maxHeap.size() != 0){
            ll.add(maxHeap.peek().key);
            maxHeap.poll();
        }
        
        Collections.sort(ll);
        return ll;
        
    }
}

BY USING MIN-HEAP:-
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        class Pair{
            int key;
            int value;
    
            Pair(int key, int value){
                this.key = key;
                this.value = value;
            }
        }

        List<Integer> ll = new ArrayList<>();
        
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>(10, new Comparator<Pair>(){
            // @Override
            public int compare(Pair f, Pair s){
                if(s.value - f.value == 0){
                    return s.key - f.key;
                }else{
                    return s.value - f.value;    
                }
                
            }
        });
        
        for(int i:arr){ 
            
                maxHeap.add(new Pair(i, Math.abs(i - x)));
            
            if(maxHeap.size()>k){
                maxHeap.poll();
            }
        }
        
        while(maxHeap.size() != 0){
            ll.add(maxHeap.peek().key);
            maxHeap.poll();
        }
        
        Collections.sort(ll);
        return ll;
        
    }
}

BY USING MAX-HEAP:-
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        class Pair{
            int key;
            int value;
    
            Pair(int key, int value){
                this.key = key;
                this.value = value;
            }
        }

        List<Integer> ll = new ArrayList<>();
        
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>(10, new Comparator<Pair>(){
            // @Override
            public int compare(Pair f, Pair s){
                if(s.key - f.key == 0){
                    return s.value - f.value;
                }else{
                    return s.diff - f.diff;    
                }
                
            }
        });
        
        for(int i:arr){ 
            
                maxHeap.add(new Pair(i, Math.abs(i - x)));
            
            if(maxHeap.size()>k){
                maxHeap.poll();
            }
        }
        
        while(!maxHeap.isEmpty(){
            ll.add(maxHeap.poll().val);
           
        }
        
        Collections.sort(ll);
        return ll;
        
    }
}


