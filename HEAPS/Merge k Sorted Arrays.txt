

Given K sorted arrays arranged in the form of a matrix of size K*K. The task is to merge them into one sorted array.
Example 1:

Input:
K = 3
arr[][] = {{1,2,3},{4,5,6},{7,8,9}}
Output: 1 2 3 4 5 6 7 8 9
Explanation:Above test case has 3 sorted
arrays of size 3, 3, 3
arr[][] = [[1, 2, 3],[4, 5, 6], 
[7, 8, 9]]
The merged list will be 
[1, 2, 3, 4, 5, 6, 7, 8, 9].



class Node implements Comparable<Node> {
          public int value;
          public int arrno;
          public int idx;
          Node(int value,int i,int j)
          {
              this.value=value;
              this.arrno=i;
              this.idx=j;
          }
          
          public int compareTo(Node no)
          {
              if(value<=no.value) return -1;
              else return 1;
          }
    }
class Solution
{
    //Function to merge k sorted arrays.
    
    public static ArrayList<Integer> mergeKArrays(int[][] arr,int K) 
    {
        // Write your code here.
        // ArrayList<Integer> node=new ArrayList<>();
        ArrayList<Integer> res=new ArrayList<>();
        PriorityQueue<Node> q=new PriorityQueue<>();
        for(int i=0;i<K;i++){
           Node n= new Node(arr[i][0],i,0);
            q.add(n);
        }
        while(!q.isEmpty())
        {
            Node data=q.poll();
            res.add(data.value);
            int ii=data.arrno;
            int jj=data.idx;
            if(jj+1<K)
            q.add(new Node(arr[ii][jj+1],ii,jj+1));
        }
        return res;
        
    }
}