
Given two decimal numbers represented by two linked lists of size N and M respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).

class Solution{
    
    static Node reverse(Node head){
        Node prev=null;
        Node nex=null;
        Node cur=head;
        while(cur!=null){
            nex=cur.next;
            cur.next=prev;
            prev=cur;
            cur=nex;
        }
        return prev;
    }
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node first, Node second){
        // code here
        // return head of sum list
        first=reverse(first);
        second=reverse(second);
        Node ans=new Node(0);
        Node p=first;
        Node q=second;
        Node cur=ans;
        int carry=0;
        while(p!=null || q!=null){
            int x=(p!=null)?p.data:0;
            int y=(q!=null)?q.data:0;
            int sum=x+y+carry;
            carry=sum/10;
            cur.next=new Node(sum%10);
            cur=cur.next;
            
            if(p!=null){
                p=p.next;
            }
            if(q!=null){
                q=q.next;
            }
            if(carry>0){
            cur.next=new Node(carry);
            
        }
        }
        
        return reverse(ans.next);
        
    }
}