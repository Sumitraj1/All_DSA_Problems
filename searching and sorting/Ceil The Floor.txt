
Given an unsorted array Arr[] of N integers and an integer X, find floor and ceiling of X in Arr[0..N-1].

Floor of X is the largest element which is smaller than or equal to X. Floor of X doesn’t exist if X is smaller than smallest element of Arr[].

Ceil of X is the smallest element which is greater than or equal to X. Ceil of X doesn’t exist if X is greater than greatest element of Arr[].

Example 1:

Input:
N = 8, X = 7
Arr[] = {5, 6, 8, 9, 6, 5, 5, 6}
Output: 6 8
Explanation:
Floor of 7 is 6 and ceil of 7 
is 8.

class Solve {
    Pair getFloorAndCeil(int[] arr, int n, int x) {
        // code here
         int a = Integer.MAX_VALUE;
    int b = Integer.MIN_VALUE;
    for(int i=0; i<arr.length; i++){
      if(b<arr[i] && arr[i]<=x){
        b = arr[i];
      }
      if(arr[i]>=x && a>arr[i]){
        a= arr[i];
      }
    }
    if(a == Integer.MAX_VALUE){
      a = -1;
    }
    if(b == Integer.MIN_VALUE){
      b = -1;
    }
  return new Pair(b, a);
    }
}

