Given an array of names (consisting of lowercase characters) of candidates in an election. A candidate name in array represents a vote casted to the candidate. Print the name of candidate that received Max votes. If there is tie, print lexicographically smaller name.

Example 1:

Input:
n = 13
Votes[] = {john,johnny,jackie,johnny,john 
jackie,jamie,jamie,john,johnny,jamie,
johnny,john}
Output: john 4
Explanation: john has 4 votes casted for 
him, but so does johny. john is 
lexicographically smaller, so we print 
john and the votes he received.

class Solution
{
    //Function to return the name of candidate that received maximum votes.
    public static String[] winner(String arr[], int n)
    {
        // add your code
        
        Map<String, Integer> votes = new TreeMap<String, Integer>();
        for(String name : arr){
            votes.put(name, votes.getOrDefault(name, 0)+1);
        }
        
        String winner="";
        int maxVotes = -1;
        
        for(Map.Entry<String, Integer> candidate : votes.entrySet()){
            if(maxVotes < candidate.getValue()){
                maxVotes=candidate.getValue();
                winner = candidate.getKey();
            }
            else if(candidate.getValue()==maxVotes) {
                if(candidate.getKey().compareTo(winner)<0) {
                    winner=candidate.getKey();
                }
            }
        }
        
        String[] result =  new String[2];
        result[0]=winner;
        result[1]=maxVotes+"";
        
        return result;
        
    }
}
