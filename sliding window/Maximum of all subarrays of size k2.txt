
Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.

Example 1:

Input:
N = 9, K = 3
arr[] = 1 2 3 1 4 5 2 3 6
Output: 
3 3 4 5 5 5 6 
Explanation: 
1st contiguous subarray = {1 2 3} Max = 3
2nd contiguous subarray = {2 3 1} Max = 3
3rd contiguous subarray = {3 1 4} Max = 4
4th contiguous subarray = {1 4 5} Max = 5
5th contiguous subarray = {4 5 2} Max = 5
6th contiguous subarray = {5 2 3} Max = 5
7th contiguous subarray = {2 3 6} Max = 6

class Solution
{
    //Function to find maximum of each subarray of size k.
    static ArrayList <Integer> max_of_subarrays(int nums[], int n, int k)
    {
        // Your code here
        
        int i=0, j=0;
        int size = n;
        ArrayList <Integer> A=new ArrayList <Integer>(); 
        Deque<Integer> deque = new ArrayDeque<Integer>();
        
        while(j<size){
            
            while(deque.size()>0 && deque.peekLast()<nums[j]){
                deque.pollLast();
            }
            deque.offerLast(nums[j]);
            
            if(j-i+1<k){
                j++;
            }
            else if(j-i+1 == k){
                A.add(deque.peekFirst());
                if(deque.peekFirst()==nums[i]){
                    deque.pollFirst();
                }
                i++;
                j++;
            }
        }
        return A;
        
    } 
}