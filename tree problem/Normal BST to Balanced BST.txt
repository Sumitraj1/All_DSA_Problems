Given a Binary Search Tree, modify the given BST such that it is balanced and has minimum possible height. Return the balanced BST.

Example1:

Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30
Example2:

Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   
    \          /                  \ 
     2        1                    4

/*class Node
{
    int data;
    Node right, left;
    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/

class GfG
{
    ArrayList<Integer> arr=new ArrayList<>();
    Node buildBalancedTree(Node root) 
    {
        //Add your code here.
        inorder(root);
        return createTree(0,arr.size()-1);
    }
    void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        arr.add(root.data);
        inorder(root.right);
    }
    Node createTree(int i,int j){
        if(i>j){
            return null;
        }
        int mid=(i+j)/2;
        Node n=new Node(arr.get(mid));
        n.left=createTree(i,mid-1);
        n.right=createTree(mid+1,j);
        return n;
    }
}
