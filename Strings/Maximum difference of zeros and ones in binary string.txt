
Given a binary string S consisting of 0s and 1s. The task is to find the maximum difference of the number of 0s and the number of 1s (number of 0s â€“ number of 1s) in the substrings of a string.

Note: In the case of all 1s, the answer will be -1.

Example 1:

Input : S = "11000010001" 
Output : 6 
Explanatio: From index 2 to index 9, 
there are 7 0s and 1 1s, so number 
of 0s - number of 1s is 6. 
Example 2:

Input: S = "111111"
Output: -1
Explanation: S contains 1s only 

class Solution {
    int maxSubstring(String S) {
        // code here
    //      int i = 0 ;
    //     int zero = 0 , one = 0 , ans = 0;
    //      if(!S.contains("0")){
    //         return -1;
    //     }
    //   char ch[]=S.toCharArray();
    //   for( i = 0 ; i < ch.length;i++){
    //       if(ch[i] == '0'){
    //           zero++;
    //       }else{
    //           one++;
    //       }
    //       int diff = zero-one;
    //       if(diff > ans){
    //           ans = diff;
    //       }
    //       if(diff < 0){
    //           diff = 0 ;
    //           zero = 0 ;
    //           one = 0 ;
    //       }
       
    //   }
        
    //     return ans;
    
    int n=S.length();
        int ans=0;
       
        int c=0;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            if(S.charAt(i)=='0'){
               c=1;  
            }
            else{
                c=-1;
            }
            sum=Math.max(c,sum+c);
            ans=Math.max(ans,sum);
        }
        if(ans==0){
          return -1;  
        } 
        return ans;
    }
}