You are given a string S of 2N characters consisting of N ‘[‘ brackets and N ‘]’ brackets. A string is considered balanced if it can be represented in the form S2[S1] where S1 and S2 are balanced strings. We can make an unbalanced string balanced by swapping adjacent characters.
Calculate the minimum number of swaps necessary to make a string balanced.

Note - Strings S1 and S2 can be empty.

Example 1:

Input  : []][][
Output : 2
Explanation :
First swap: Position 3 and 4
[][]][
Second swap: Position 5 and 6
[][][]

Example 2:

Input : [[][]]
Output : 0 
Explanation:
String is already balanced.


class Solution{
    static int minimumNumberOfSwaps(String S){
        // code here
      int open=0,close=0,ub=0,swap=0;
      for(char i : S.toCharArray())
      {
        if(i==']')
        {
            close++;
        }
        else
        {
            open++;
            if(ub>0){
               swap+=ub; 
            }
            
        }
        ub=close-open;
      }
      return swap;
    }
}