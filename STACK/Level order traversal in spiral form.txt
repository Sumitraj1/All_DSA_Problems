

Spiral order Traversal mean: Starting from level 0 for root node, for all the even levels we print the node's value from right to left and for all the odd levels we print the node's value from left to right. 

For below tree, function should return 1, 2, 3, 4, 5, 6, 7.


 
 

Example 1:

Input:
      1
    /   \
   3     2
Output:1 3 2


class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
*/

class Spiral
{
    //Function to return a list containing the level order 
    //traversal in spiral form.	
    ArrayList<Integer> findSpiral(Node root) 
    {
        // Your code here
         ArrayList<Integer> a1 = new ArrayList<Integer>();
    if(root == null)
        return a1;
    Stack<Node> s1 = new Stack<Node>();
    Stack<Node> s2 = new Stack<Node>();
    s2.push(root);
    while(!s1.isEmpty() || !s2.isEmpty())
    {
        while(!s1.isEmpty())
        {
            Node temp = s1.pop();
            a1.add(temp.data);
            if(temp.left!=null)
                s2.push(temp.left);
            
            if(temp.right!=null)
                s2.push(temp.right);
        }
        while(!s2.isEmpty())
        {
            Node temp = s2.pop();
            a1.add(temp.data);
            if(temp.right!=null)
                s1.push(temp.right);
            if(temp.left!=null)
                s1.push(temp.left);
        }
    }
    return a1;
    }
}