
Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

 

Example 1:

Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6


class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K)
    {
        long[] ans=new long[N-K+1];
         Queue<Long> q = new LinkedList<>();
         int index=0;
         for(int i=0;i<K-1;i++){
             if(A[i]<0){
                 q.add(A[i]);
             }
         }
         
         for(int i=K-1;i<N;i++){
             if(A[i]<0){
                 q.add(A[i]);
             }
             if(!q.isEmpty()){
                 ans[index]=q.peek();
                 
                 if(q.peek()==A[i-K+1]){
                     q.remove();
                 }
             }
             else{
                 ans[index]=0;
             }
              index++;
         }
         return ans;
             
             
         
    }
}